module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  sujet: String
  contenu: String
  statut: Boolean
  createdAt: DateTime
  postedBy: User
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  sujet: String
  contenu: String
  statut: Boolean
  postedBy: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutPostedByInput {
  id: ID
  sujet: String
  contenu: String
  statut: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  sujet_ASC
  sujet_DESC
  contenu_ASC
  contenu_DESC
  statut_ASC
  statut_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  sujet: String
  contenu: String
  statut: Boolean
  createdAt: DateTime
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sujet: String
  sujet_not: String
  sujet_in: [String!]
  sujet_not_in: [String!]
  sujet_lt: String
  sujet_lte: String
  sujet_gt: String
  sujet_gte: String
  sujet_contains: String
  sujet_not_contains: String
  sujet_starts_with: String
  sujet_not_starts_with: String
  sujet_ends_with: String
  sujet_not_ends_with: String
  contenu: String
  contenu_not: String
  contenu_in: [String!]
  contenu_not_in: [String!]
  contenu_lt: String
  contenu_lte: String
  contenu_gt: String
  contenu_gte: String
  contenu_contains: String
  contenu_not_contains: String
  contenu_starts_with: String
  contenu_not_starts_with: String
  contenu_ends_with: String
  contenu_not_ends_with: String
  statut: Boolean
  statut_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  sujet: String
  contenu: String
  statut: Boolean
  postedBy: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  sujet: String
  contenu: String
  statut: Boolean
}

input PostUpdateManyMutationInput {
  sujet: String
  contenu: String
  statut: Boolean
}

input PostUpdateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutPostedByDataInput {
  sujet: String
  contenu: String
  statut: Boolean
}

input PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPostedByDataInput!
}

input PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPostedByDataInput!
  create: PostCreateWithoutPostedByInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sujet: String
  sujet_not: String
  sujet_in: [String!]
  sujet_not_in: [String!]
  sujet_lt: String
  sujet_lte: String
  sujet_gt: String
  sujet_gte: String
  sujet_contains: String
  sujet_not_contains: String
  sujet_starts_with: String
  sujet_not_starts_with: String
  sujet_ends_with: String
  sujet_not_ends_with: String
  contenu: String
  contenu_not: String
  contenu_in: [String!]
  contenu_not_in: [String!]
  contenu_lt: String
  contenu_lte: String
  contenu_gt: String
  contenu_gte: String
  contenu_contains: String
  contenu_not_contains: String
  contenu_starts_with: String
  contenu_not_starts_with: String
  contenu_ends_with: String
  contenu_not_ends_with: String
  statut: Boolean
  statut_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  postedBy: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  createdAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  noms_ASC
  noms_DESC
  phone_ASC
  phone_DESC
  mot_de_passe_ASC
  mot_de_passe_DESC
  date_naissance_ASC
  date_naissance_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
  createdAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  noms: String
  phone: String
  mot_de_passe: String
  date_naissance: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  noms: String
  noms_not: String
  noms_in: [String!]
  noms_not_in: [String!]
  noms_lt: String
  noms_lte: String
  noms_gt: String
  noms_gte: String
  noms_contains: String
  noms_not_contains: String
  noms_starts_with: String
  noms_not_starts_with: String
  noms_ends_with: String
  noms_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  mot_de_passe: String
  mot_de_passe_not: String
  mot_de_passe_in: [String!]
  mot_de_passe_not_in: [String!]
  mot_de_passe_lt: String
  mot_de_passe_lte: String
  mot_de_passe_gt: String
  mot_de_passe_gte: String
  mot_de_passe_contains: String
  mot_de_passe_not_contains: String
  mot_de_passe_starts_with: String
  mot_de_passe_not_starts_with: String
  mot_de_passe_ends_with: String
  mot_de_passe_not_ends_with: String
  date_naissance: String
  date_naissance_not: String
  date_naissance_in: [String!]
  date_naissance_not_in: [String!]
  date_naissance_lt: String
  date_naissance_lte: String
  date_naissance_gt: String
  date_naissance_gte: String
  date_naissance_contains: String
  date_naissance_not_contains: String
  date_naissance_starts_with: String
  date_naissance_not_starts_with: String
  date_naissance_ends_with: String
  date_naissance_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
`
      }
    